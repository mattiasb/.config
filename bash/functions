#!/bin/bash

function _help-flag {
    [[ " ${*} " == *" --help "* ]] || [[ " ${*} " == *" -h "* ]]
}

function git-commiters {
    if [ $# -eq 0 ]; then
        git log --oneline --pretty="format:%an <%ae>" | sort | uniq
    else
        git log --oneline --pretty="format:%an <%ae>" "${1}".. | sort | uniq
    fi
}

function which {
    (alias; declare -f) | /usr/bin/which --tty-only                            \
                                         --read-alias                          \
                                         --read-functions                      \
                                         --show-tilde                          \
                                         --show-dot "${@}"
}

function mkcd {
    mkdir -p "${1}" && cd "${_}" || return $?
}
complete -d mkcd

function cpcd {
    cp "${@}" && cd "${_}" || return $?
}
_completion_loader _longopt
complete -F _longopt cpcd

function mvcd {
    mv "${@}" && cd "${_}" || return $?
}
_completion_loader _longopt
complete -F _longopt mvcd

function project-create {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: project-create <NAME>"
        return 2
    fi

    mkcd "${HOME}/Code/github.com/mattiasb/${1}"
    git init
    echo "*~"   > .gitignore
    echo "*#*" >> .gitignore
    echo       >> .gitignore
    touch README.md
    git remote add origin "git@github.com:mattiasb/${1}.git"
}

function project-cd {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: project-cd <NAME>"
        return 2
    fi

    cd "${HOME}/Code/github.com/mattiasb/${1}" || return
}
function _complete-project-folder {
    local projects=("${HOME}/Code/github.com/mattiasb/${2}"*)
    [[ -e ${projects[0]} ]] && COMPREPLY=( "${projects[@]##*/}" )
}
complete -F _complete-project-folder project-create
complete -F _complete-project-folder project-cd

function test-create {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: test-create <NAME>"
        return 2
    fi

    mkcd "${HOME}/Code/Test/${1}"
}

function test-cd {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: test-cd <NAME>"
        return 2
    fi

    cd "${HOME}/Code/Test/${1}" || return
}

function _complete-test-folder {
    local tests=("${HOME}/Code/Test/${2}"*)
    [[ -e ${tests[0]} ]] && COMPREPLY=( "${tests[@]##*/}" )
}
complete -F _complete-test-folder test-create
complete -F _complete-test-folder test-cd

function ansible-vagrant-playbook {
    if _help-flag; then
        echo "Usage: ansible-vagrant-playbook [<ANSIBLE-PLAYBOOK-ARGS>...]"
        return
    fi

    local inventory=.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
    ansible-playbook -i "${inventory}" "${@}"
}

function ansible-record-hostkeys {
    local host_pattern inventory

    if [ ! $# -eq 2 ] || _help-flag; then
        echo "Usage: ansible-record-hostkeys <inventory> <host-pattern>"
        echo
        echo "Import ssh host keys from hosts"
        return 2
    fi

    inventory="${1}"
    host_pattern="${2}"

    export ANSIBLE_HOST_KEY_CHECKING=False    \
        && ansible -e 'record_host_keys=True' \
                   -m ping                    \
                   -i "${inventory}"          \
                   "${host_pattern}"
}

function gcd {
    cd "$(git rev-parse --show-toplevel)/${*}" || exit $?
}

function virsh-get-ip {
    local macs domain mac_regex ip_regex

    if [ $# -lt 1 ] || _help-flag; then
        echo "Usage vm-get-ip <domain>"
        echo
        echo "Show IP's of a given virsh domain"
        return 2
    fi

    domain="${1}"
    mac_regex="([0-9a-f]{2}:){5}([0-9a-f]{2})"
    ip_regex="^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"

    macs="$(virsh domiflist "${domain}" | grep --color=never -o -E "${mac_regex}")"

    for mac in $macs ; do
        arp -e | grep "${mac}" | grep --color=never -o -P "${ip_regex}"
    done
}

# Depends on http://github.com/LuyaoHuang/virsh-bash-completion
_completion_loader virsh

function _virsh-get-ip {
    local cur doms

    COMPREPLY=()

    doms=$(_virsh_list_domains "1")
    COMPREPLY=( $(compgen -W "$doms" -- "${COMP_WORDS[COMP_CWORD]}") )
}
complete -F _virsh-get-ip virsh-get-ip

function virsh-ssh {
    local uad domain user host

    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage virsh-ssh [<user>@]<domain>"
        echo
        echo "Show IP's of a given virsh domain"
        return 2
    fi

    IFS="@"; declare -a uad=($@)

    case "${#uad[@]}" in
        1)
            domain="${uad[0]}"
            ;;
        2)
            user="${uad[0]}"
            domain="${uad[1]}"
            ;;
        *)
            echo "Bad argument. Should be [<user>@]<domain> got: ${uad[*]}"
    esac

    host=$(virsh-get-ip "${domain}")

    if [ -z "${user}" ]; then
        ssh "${host}"
    else
        ssh "${user}@${host}"
    fi
}

function _virsh-ssh {
    local cur user
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"

    [[ $cur == *@* ]] && user=${cur%@*}@ && cur=${cur#*@}

    doms=$(_virsh_list_domains "1")
    COMPREPLY=( $(compgen -W "$doms" -- "$cur") )
    for (( i=0; i < ${#COMPREPLY[@]}; i++ )); do
        COMPREPLY[i]=$user${COMPREPLY[i]}
    done
}

# complete -F _virsh-ssh virsh-ssh

function list-ssh-servers {
    avahi-browse _ssh._tcp -t                       | \
        grep --color=never IPv4                     | \
        awk '{ printf "%-10s %s.local\n", $2, $4 }' | \
        sort
}

function magit {
    local path

    if _help-flag; then
        echo "Usage: magit [<PATH>]"
        return
    fi

    path="${1:-.}"

    pushd "${path}" >/dev/null || return $?

    git rev-parse --is-inside-work-tree >/dev/null || return $?

    /bin/emacsclient -s main -c -nw \
                     --eval '(progn (magit-status) (delete-other-windows))'

    popd >/dev/null || return 3
}
complete -d magit

function cmd-which {
    local cmd
    local -a args

    args=( "${@}" )

    case ${#args[@]} in
        0)
            echo "Usage: cmd-which <COMMAND> [FLAGS...]"
            return 2
            ;;
        1)
            echo "Usage: ${1}-which [FLAGS...] <COMMAND>"
            return 2
            ;;
    esac

    cmd="$(type -P "${args[-1]}")"
    unset 'args[${#args[@]}-1]'

    if [ ! -x "${cmd}" ]; then
        echo "No executable named <${cmd}> found!" >&2
        return 2
    fi

    eval "${args[*]} $(command -v "${cmd}")"
}

function lpass {
    command -v lpass > /dev/null || return $?

    case "${1}" in
        -v|--version|--help|-h|login|logout|status) ;;
        *)
            if ! /bin/lpass status -q || ! /bin/lpass ls >/dev/null; then
                /bin/lpass login mattias.jc.bengtsson@gmail.com
            fi
            ;;
    esac

    /bin/lpass "${@}"
}

function calc {
    local args

    args="${*}"

    echo $((args))
}

function ypterm {
    yaml2json < "${1:-/dev/stdin}" | jpterm
}

function yq {
    yaml2json -i /dev/stdin | jq "${@}" | json2yaml
}

function yqp {
    yaml2json < "${1:-/dev/stdin}" | jqp
}

function logins {
    local since until

    since="${1:-today}"
    until="${2:-$(date '+%Y-%m-%d' -d "${since}+1 days")}"

    journalctl --since "${since}" --until "${until}" -t lockmon --no-pager \
        | tail -n +2                                                       \
        | cut -d ' ' -f '1-3 6-'
}

function logins2 {
    local since verbose line time ptime msg

    verbose=false

    if [[ "${1}" = *"--verbose" ]] || [[ "${1}" = *"-v" ]]; then
        verbose=true
        shift
    fi

    if [[ "${2}" = *"--verbose" ]] || [[ "${2}" = *"-v" ]]; then
        verbose=true
    fi

    since="${1}"

    logins="$(logins "${since}")"

    if [[ "${logins}" = *"No entries"* ]]; then
        echo "No entries!"
        return
    fi

    while read -r line; do
        ptime="${time}"
        time="$(cut -d ' ' -f 3 <<< "${line}" | cut -d ':' -f -2)"
        msg="$(cut -d ' ' -f '4-' <<< "${line}")"
        case "${msg}" in
            "Monitoring Terminated.")
                test -n "${ptime}" && echo "${time}"
                echo -n "Shutdown: ${time} – "
                continue
                ;;
            "Screen Locked")
                test -n "${ptime}" && echo "${time}"
                echo -n "  Locked: ${time} – "
                continue
                ;;
            "Monitoring Started." | "Screen Unlocked")
                if [ -z "${ptime}" ]; then
                    if [ "${msg}" = "Monitoring Started." ]; then
                        echo -n "Shutdown:       – "
                    else
                        echo -n "  Locked:       – "
                    fi
                fi

                echo "${time}"
                echo -n "Unlocked: ${time} – "
                continue
                ;;
            *)
                echo "Got unexpected log message:" >&2
                echo "   ${msg}" >&2
                echo
                echo "See the full logs:"
                logins "${since}"
                return 1
        esac
    done <<< "$(grep -v -- '--' <<< "${logins}")"

    case "${msg}" in
        "Monitoring Started." | "Screen Unlocked")
            date +"%H:%M"
            ;;
        *)
            echo
            ;;
    esac

    if [ "${verbose}" = true ]; then
        echo ---------------------
        logins "${since}"
    fi
}

function remake {
    if [ $# -lt 1 ] || _help-flag; then
        echo "Usage: remake <file>..."
        return 2
    fi
    touch --date=@1 "${@}" && make "${@}"
}

function gg {
    if [ $# -ne 1 ] || _help-flag; then
        echo "Usage: gg <url>"
        return 2
    fi
    git get "${1}" && cd "$(git get --show-path "${1}")" || return $?
}

function mdns-ssh {
    local connection

    if _help-flag "${@}"; then
        echo "Usage: mdns-ssh [-u <USER> --user <USER>]"
        echo
        echo "Let's you choose and connect to a host over SSH, using mdns to get"
        echo "a list of possible candidates."
        return
    fi

    connection="$( avahi-browse _ssh._tcp -t         \
                 | grep --color=never IPv4           \
                 | awk '{ printf "%s.local\n", $4 }' \
                 | sort                              \
                 | fzf
                 )"

    opts="$(getopt -o u: --long user: -n "mdns-ssh" -- "$@")"
    eval set -- "$opts"
    while true; do
        case "$1" in
            -u | --user )
                connection="${2}@${connection}"
                shift 2
                ;;
            -- ) shift; break ;;
            * ) break ;;
        esac
    done

    # shellcheck disable=SC2029
    ssh "${connection}" "${@}"
}

function http-serve {
    local path

    path="$(readlink -f "${1:-.}")"

    mkdir -p "${path}"

    sudo docker run                                  \
         --rm                                        \
         --publish 80:80                             \
         --name nginx-serve                          \
         --volume "${path}:/usr/share/nginx/html:ro" \
         nginx:1.14-alpine
}

function docker-volume-by-age {
    for volume in $(sudo docker volume ls --format "{{.Name}}"); do
        sudo docker volume inspect "${volume}" \
             --format "{{ .CreatedAt }}   $volume"
    done | column -t | sort
}

function makepasswd-alphanum {
    local alphanum

    alphanum="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

    makepasswd -c "${alphanum}" "${@}"
}

function nautilus-smb-logout {
    local user server

    if [ "${#}" -lt 2 ] || _help-flag "${@}"; then
        echo "Usage: nautilus-smb-logout <user> <server>"
        return 2
    fi

    user="${1}"
    server="${2}"

    secret-tool clear protocol smb user "${user}" server "${server}"
}

function ssh-remove-hostkey {
    local host ips exitcode

    exitcode=0

    if [ "${#}" -lt 1 ] || _help-flag "${@}"; then
        echo "Usage: ${FUNCNAME[0]} <server>..."
        return 2
    fi

    for host in "${@}"; do
        ips="$(dig +short "${host}")"
        for i in $ips $host; do
            if ! ssh-keygen -R "${i}"; then
                exitcode=2
            fi
        done
    done

    return "${exitcode}"
}
_completion_loader ssh
complete -F _ssh ssh-remove-hostkey

function ssht {
    ssh -t "$@" tmux new-session -A -s ssh_tmux
}
complete -F _ssh ssht

function ssh-wait {
    until ssh "${@}" true; do
        sleep 5
    done && ssh "${@}"
}
complete -F _ssh ssh-wait

function ssh-df {
    local host

    if [ "${#}" != 1 ] || _help-flag "${@}"; then
        echo "Usage: ${FUNCNAME[0]} <NODE>"
        return 2
    fi

    host="${1}"

    ssh "root@${host}" df -h | grep --color=never -E '^(Filesystem|/dev)'
}
complete -F _ssh ssh-df

function speedtest {
    local prefix

    case "${#}" in
        0) prefix="" ;;
        *) prefix="ssh -t ${*}"
    esac

    ${prefix} iperf3                        \
              -R                            \
              -c paris.testdebit.info       \
              -p $((9200 + "$RANDOM" % 41)) \
              -i 1                          \
              -t 10
}
complete -F _ssh speedtest

function loop-hero {
    # Temporary
    flatpak run                                                         \
            --cwd="${HOME}/.var/app/com.valvesoftware.Steam/loop-hero/" \
            --command=./loop-hero.sh                                    \
            com.valvesoftware.Steam
}

function join-string {
    local IFS="${1}"

    IFS="${1}"
    shift
    echo "${*}"
}

function hex2dec {
    printf "%d\n" "0x${1}"
}

function dec2hex {
    printf "%x\n" "${1}"
}

function ip2mac {
    local values out

    IFS='.' read -ra values <<< "${1}"
    out=()

    for v in "${values[@]}"; do
        out+=("$(dec2hex "${v}")")
    done

    join-string ':' "${out[@]}"
}

function mac2ip {
    local values out

    IFS=':' read -ra values <<< "${1}"
    out=()

    for v in "${values[@]}"; do
        out+=("$(hex2dec "${v}")")
    done

    join-string '.' "${out[@]}"
}

function jhparm {
    local disk

    if [ $# -lt 1 ]; then
        echo "Usage: ${0} <DISK>" >&2
        return 2
    fi
    disk="${1}"

    sudo dd                                                                    \
         if="${disk}"                                                          \
         of=/dev/null                                                          \
         bs=50M                                                                \
         count=10000                                                           \
         status=progress                                                       \
         iflag=direct
}

function vagrant-up {
    local -a boxes

    if [ "${#}" -gt 0  ]; then
        boxes=( "${@}" )
    else
        mapfile -t boxes < <( vagrant status --machine-readable \
                                  | cut -d "," -f 2             \
                                  | tr -s '\n' '\n'             \
                                  | sort -u                     \
                            )
    fi

    for box in "${boxes[@]}"; do
        vagrant up "${box}"
    done
}

function diff-dirs {
    local dir1 dir2

    dir1="${1}"
    dir2="${2}"

    echo "====== Just names ======"
    if diff -qr "${dir1}" "${dir2}"; then
        echo
        echo "All ok!"
    else
        echo
        echo "File differences detected!"
        return 3
    fi

    echo
    echo "====== Permissions ======"
    pushd "${dir1}" >/dev/null || exit
    find . -exec stat --format='%n %A %U %G' {} \; | sort > ../"${dir1}.list"
    popd >/dev/null || exit

    pushd "${dir2}" >/dev/null || exit
    find . -exec stat --format='%n %A %U %G' {} \; | sort > ../"${dir2}.list"
    popd >/dev/null || exit


    if diff -u "${dir1}.list" "${dir2}.list"; then
        echo
        echo "All ok!"
    else
        echo
        echo "File permission differences detected!"
        return 4
    fi

    rm "${dir1}.list" "${dir2}.list"
}

#### Kubernetes ####

function k8s-kill-all {
    local cluster namespace pattern

    if [ "${#}" != 2 ]; then
        echo "Usage: k8s-kill-all <cluster> <namespace> <pattern>"
        return 2
    fi

    cluster="${1}"
    namespace="${2}"
    pattern="${3}"

    kubectl --kubeconfig "${HOME}/.kube/config.${cluster}" get pods --namespace="${namespace}" \
        | cut -d ' ' -f 1                       \
        | grep -E "${pattern}"                  \
        | xargs kubectl delete pod -n argo
}

function k8s-get-running-pods-on-node {
    local cluster node

    if [ "${#}" != 2 ] || _help-flag "${@}"; then
        echo "Usage: ${FUNCNAME[0]} <CLUSTER> <NODE>"
        return 2
    fi

    cluster="${1}"
    node="${2}"

    kubectl  --kubeconfig "${HOME}/.kube/config.${cluster}" \
             get pods \
             --all-namespaces -o wide \
             --field-selector "spec.nodeName=${node},status.phase=Running"
}
complete -F _ssh k8s-get-running-pods-on-node

function k8s-get-running-pods-on-nodes {
    local cluster
    local nodes
    local node

    cluster="${1}"
    shift
    nodes=( "${@}" )

    if [ "${#}" -lt 2 ] || _help-flag "${@}"; then
        echo "Usage: ${FUNCNAME[0]} <CLUSTER> <NODE>..."
        return 2
    fi

    for node in "${nodes[@]}"; do
        echo
        echo "${node}"
        echo "============="
        k8s-get-running-pods-on-node production "${node}"
        echo
        echo
    done
}
complete -F _ssh k8s-get-running-pods-on-node


function k8s-get-failed-pods {
    local cluster namespace

    if [ "${#}" -gt 1 ] || _help-flag "${@}"; then
        echo "Usage: ${FUNCNAME[0]} <cluster> [NAMESPACE]"
        return 2
    fi

    cluster="${1}"
    namespace="${2}"

    kubectl --kubeconfig "${HOME}/.kube/config.${cluster}" get pod -n "${namespace}" \
            -o wide                   \
            --field-selector 'status.phase!=Succeeded'
}

function simple-dns {
    local -a domains

    local ip_count
    local -a args

    domains=( "${@}" )
    if [ "${#domains[@]}" -le 0 ]; then
        domains=( "test.tld" )
    fi

    ip_count=200

    for domain in "${domains[@]}"; do
        args+=( "--host-record=${domain},127.0.0.$(( ++ip_count ))" )
    done

    dnsmasq -Rhd -p 10053 -a 127.0.0.153 "${args[@]}"
}

function ip-of {
    local addr

    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: ip-of <address>"
        return 2
    fi

    addr="${1}"

    if ipcalc -cs "${addr}"; then
        echo "${addr}"
    else
        dig +short "${addr}"
    fi
}

function device-route-for {
    local addr

    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: get-route-device-for <address>"
        return 2
    fi

    addr="${1}"

    ip -o route get "$(ip-of "${addr}")" | sed -E 's/^.+?dev ([^ ]+?) .+$/\1/'
}

function poor-watch {
    local zzz

    if [ "${#}" -lt 2 ] || _help-flag; then
        echo "Usage: ${FUNCNAME[0]} <SLEEP> <CMD>..."
        echo
        echo "Poor mans \`watch\`. On the upside, works with BASH functions!"
        return 2
    fi

    zzz="${1}"
    shift

    while true; do
        sleep "${zzz}" || return 1
        clear
        eval "${*}"
    done
}

function k9s {
    local cluster kubeconfig

    if _help-flag "${@}" || [ "${#}" -lt 1 ]; then
        podman run --rm -it quay.io/derailed/k9s --help \
            | sed -E 's/^  k9s /  k9s <CLUSTER> /g'
        return 2
    fi

    cluster="${1}"
    shift
    kubeconfig="${HOME}/.kube/config.${cluster}"

    if [ ! -f "${kubeconfig}"  ]; then
        echo "No such file: ${kubeconfig}"
        return 3
    fi

    podman run --rm -it                          \
           -v "${kubeconfig}":/root/.kube/config \
           quay.io/derailed/k9s "${@}"
}

function header {
    local header

    header="${*}"

    echo
    echo "${*}"
    printf '=%.0s' $(seq 1 "${#header}")
    echo
}
