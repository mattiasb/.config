#!/bin/bash

function _help-flag {
    [[ " ${*} " == *" --help "* ]] || [[ " ${*} " == *" -h "* ]]
}

function git-commiters () {
    if [ $# -eq 0 ]; then
        git log --oneline --pretty="format:%an <%ae>" | sort | uniq
    else
        git log --oneline --pretty="format:%an <%ae>" "${1}".. | sort | uniq
    fi
}

function mkcd () {
    mkdir -p "${1}" && cd "${_}" || return $?
}
complete -d mkcd

function cpcd () {
    cp "${@}" && cd "${_}" || return $?
}
_completion_loader _longopt
complete -F _longopt cpcd

function mvcd () {
    mv "${@}" && cd "${_}" || return $?
}
_completion_loader _longopt
complete -F _longopt mvcd

function docker-enter {
    if [ -z "${1}" ] || _help-flag "${@}"; then
        echo "Usage docker-enter <container>"
        echo
        echo "Enter an already running container"
        return 2
    fi

    cmd="export TERM=$TERM; command -v bash >/dev/null 2>&1 && bash || sh"
    sudo docker exec -it "${1}" sh -c "${cmd}"
}

function docker-shell {
    if [ -z "${1}" ] || _help-flag "${@}"; then
        echo "Usage docker-shell <image>"
        echo
        echo "Start a throw-away container from an image"
        return 2
    fi

    cmd="export TERM=$TERM; command -v bash >/dev/null 2>&1 && bash || sh"
    sudo docker run --rm -it "${1}" sh -c "${cmd}"
}

function project-create {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: project-create <NAME>"
        return 2
    fi

    mkcd "${HOME}/Code/github.com/mattiasb/${1}"
    git init
    echo "*~"   > .gitignore
    echo "*#*" >> .gitignore
    echo       >> .gitignore
    touch README.md
}

function project-cd {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: project-cd <NAME>"
        return 2
    fi

    cd "${HOME}/Code/github.com/mattiasb/${1}" || return
}
function _complete-project-folder() {
    local projects=("${HOME}/Code/github.com/mattiasb/${2}"*)
    [[ -e ${projects[0]} ]] && COMPREPLY=( "${projects[@]##*/}" )
}
complete -F _complete-project-folder project-create
complete -F _complete-project-folder project-cd

function test-create {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: test-create <NAME>"
        return 2
    fi

    mkcd "${HOME}/Code/Test/${1}"
}

function test-cd {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: test-cd <NAME>"
        return 2
    fi

    cd "${HOME}/Code/Test/${1}" || return
}

function _complete-test-folder() {
    local tests=("${HOME}/Code/Test/${2}"*)
    [[ -e ${tests[0]} ]] && COMPREPLY=( "${tests[@]##*/}" )
}
complete -F _complete-test-folder test-create
complete -F _complete-test-folder test-cd

function ansible-vagrant-playbook {
    if _help-flag; then
        echo "Usage: ansible-vagrant-playbook [<ANSIBLE-PLAYBOOK-ARGS>...]"
        return
    fi

    local inventory=.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
    ansible-playbook -i "${inventory}" "${@}"
}

function ansible-record-hostkeys {
    local host_pattern inventory

    if [ ! $# -eq 2 ] || _help-flag; then
        echo "Usage: ansible-record-hostkeys <inventory> <host-pattern>"
        echo
        echo "Import ssh host keys from hosts"
        return 2
    fi

    inventory="${1}"
    host_pattern="${2}"

    export ANSIBLE_HOST_KEY_CHECKING=False    \
        && ansible -e 'record_host_keys=True' \
                   -m ping                    \
                   -i "${inventory}"          \
                   "${host_pattern}"
}

function git-cd {
    cd "$(git rev-parse --show-toplevel)/${*}" || exit $?
}

function virsh-get-ip {
    local macs domain mac_regex ip_regex

    if [ $# -lt 1 ] || _help-flag; then
        echo "Usage vm-get-ip <domain>"
        echo
        echo "Show IP's of a given virsh domain"
        return 2
    fi

    domain="${1}"
    mac_regex="([0-9a-f]{2}:){5}([0-9a-f]{2})"
    ip_regex="^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"

    macs="$(virsh domiflist "${domain}" | grep --color=never -o -E "${mac_regex}")"

    for mac in $macs ; do
        arp -e | grep "${mac}" | grep --color=never -o -P "${ip_regex}"
    done
}

# Depends on http://github.com/LuyaoHuang/virsh-bash-completion
_completion_loader virsh

function _virsh-get-ip {
    local cur doms

    COMPREPLY=()

    doms=$(_virsh_list_domains "1")
    COMPREPLY=( $(compgen -W "$doms" -- "${COMP_WORDS[COMP_CWORD]}") )
}
complete -F _virsh-get-ip virsh-get-ip

function virsh-ssh {
    local uad domain user host

    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage virsh-ssh [<user>@]<domain>"
        echo
        echo "Show IP's of a given virsh domain"
        return 2
    fi

    IFS="@"; declare -a uad=($@)

    case "${#uad[@]}" in
        1)
            domain="${uad[0]}"
            ;;
        2)
            user="${uad[0]}"
            domain="${uad[1]}"
            ;;
        *)
            echo "Bad argument. Should be [<user>@]<domain> got: ${uad[*]}"
    esac

    host=$(virsh-get-ip "${domain}")

    if [ -z "${user}" ]; then
        ssh "${host}"
    else
        ssh "${user}@${host}"
    fi
}

function _virsh-ssh {
    local cur user
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"

    [[ $cur == *@* ]] && user=${cur%@*}@ && cur=${cur#*@}

    doms=$(_virsh_list_domains "1")
    COMPREPLY=( $(compgen -W "$doms" -- "$cur") )
    for (( i=0; i < ${#COMPREPLY[@]}; i++ )); do
        COMPREPLY[i]=$user${COMPREPLY[i]}
    done
}

# complete -F _virsh-ssh virsh-ssh

function list-ssh-servers {
    avahi-browse _ssh._tcp -t                       | \
        grep --color=never IPv4                     | \
        awk '{ printf "%-10s %s.local\n", $2, $4 }' | \
        sort
}

function magit {
    if [ ! $# -eq 1 ] || _help-flag; then
        echo "Usage: magit <DIRECTORY>"
        return 2
    fi

    pushd "${@}" >/dev/null || return 3
    /bin/emacsclient -s main -c -nw \
                     --eval '(progn (magit-status) (delete-other-windows))'
    popd >/dev/null || return 3
}
complete -d magit

function cmd-which {
    local cmd
    cmd="${1}"
    shift

    args=( "${@}" )
    arglen=$(( ${#args[@]} ))

    case $arglen in
        0)
            echo "Usage: ${cmd}-which [FLAGS...] <COMMAND>"
            return 2
            ;;
        1)
            eval "${cmd} $(command -v "${1}")"
            return $?
            ;;
        *)
            last="${args[-1]}"
            init="${args[*]%${!#}}"
            eval "${cmd} ${init} $(command -v "${last}")"
            return $?
            ;;
    esac
}

function lpass {
    command -v lpass > /dev/null || return $?

    case "${1}" in
        -v|--version|--help|-h|login|logout|status) ;;
        *)
            if ! /bin/lpass status -q; then
                /bin/lpass login mattias.jc.bengtsson@gmail.com
            fi
            ;;
    esac

    /bin/lpass "${@}"
}

function calc {
    local args

    args="${*}"

    echo $((args))
}

function ypterm {
    local fd

    if (( $# == 0 )); then
        fd=/dev/stdin
    else
        fd="${1}"
    fi

    yaml2json < "${fd}" | jpterm
}

function yq {
    yaml2json -i /dev/stdin | jq "${@}" | json2yaml
}

function logins {
    local since until

    since="${1:-today}"
    until="${2:-$(date '+%Y-%m-%d' -d "${since}+1 days")}"

    journalctl --since "${since}" --until "${until}" -t lockmon --no-pager \
        | tail -n +2                                                       \
        | cut -d ' ' -f '1-3 6-'
}

function logins2 {
    local since verbose line time ptime msg

    verbose=false

    if [[ "${1}" = *"--verbose" ]] || [[ "${1}" = *"-v" ]]; then
        verbose=true
        shift
    fi

    if [[ "${2}" = *"--verbose" ]] || [[ "${2}" = *"-v" ]]; then
        verbose=true
    fi

    since="${1}"

    logins="$(logins "${since}")"

    if [[ "${logins}" = *"No entries"* ]]; then
        echo "No entries!"
        return
    fi

    while read -r line; do
        ptime="${time}"
        time="$(cut -d ' ' -f 3 <<< "${line}" | cut -d ':' -f -2)"
        msg="$(cut -d ' ' -f '4-' <<< "${line}")"
        case "${msg}" in
            "Monitoring Terminated.")
                test -n "${ptime}" && echo "${time}"
                echo -n "Shutdown: ${time} – "
                continue
                ;;
            "Screen Locked")
                test -n "${ptime}" && echo "${time}"
                echo -n "  Locked: ${time} – "
                continue
                ;;
            "Monitoring Started." | "Screen Unlocked")
                if [ -z "${ptime}" ]; then
                    if [ "${msg}" = "Monitoring Started." ]; then
                        echo -n "Shutdown:       – "
                    else
                        echo -n "  Locked:       – "
                    fi
                fi

                echo "${time}"
                echo -n "Unlocked: ${time} – "
                continue
                ;;
            *)
                echo "Got unexpected log message:" >&2
                echo "   ${msg}" >&2
                echo
                echo "See the full logs:"
                logins "${since}"
                return 1
        esac
    done <<< "$(grep -v -- '--' <<< "${logins}")"

    case "${msg}" in
        "Monitoring Started." | "Screen Unlocked")
            date +"%H:%M"
            ;;
        *)
            echo
            ;;
    esac

    if [ "${verbose}" = true ]; then
        echo ---------------------
        logins "${since}"
    fi
}

function remake {
    if [ $# -lt 1 ] || _help-flag; then
        echo "Usage: remake <file>..."
        return 2
    fi
    touch --date=@1 "${@}" && make "${@}"
}

function gg {
    if [ $# -ne 1 ] || _help-flag; then
        echo "Usage: gg <url>"
        return 2
    fi
    git get "${1}" && cd "$(git get --show-path "${1}")" || return $?
}

function mdns-ssh {
    local connection

    connection="$(avahi-browse _ssh._tcp -t     | \
              grep --color=never IPv4           | \
              awk '{ printf "%s.local\n", $4 }' | \
              sort                              | \
              fzf)"

    opts="$(getopt -o u: --long user: -n "mdns-ssh" -- "$@")"
    eval set -- "$opts"
    while true; do
        case "$1" in
            -u | --user )
                connection="${2}@${connection}"
                shift 2
                ;;
            -- ) shift; break ;;
            * ) break ;;
        esac
    done

    # shellcheck disable=SC2029
    ssh "${connection}" "${@}"
}

function http-serve {
    local path

    path="$(readlink -f "${1:-.}")"

    mkdir -p "${path}"

    sudo docker run                                  \
         --rm                                        \
         --publish 80:80                             \
         --name nginx-serve                          \
         --volume "${path}:/usr/share/nginx/html:ro" \
         nginx:1.14-alpine
}
