# -*- mode: sh -*-

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Source any potential machine local scripts
if [ -f "${HOME}/.config/bash/rc.local" ]; then
    . "${HOME}/.config/bash/rc.local"
fi

### Environment

# User specific environment and startup programs
if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
    source /usr/share/git-core/contrib/completion/git-prompt.sh
fi

if [[ -n "${UNDER_JHBUILD}" ]]; then
    PSE="${PSE}JH"
fi
if [[ -n "$STY" ]]; then
    if [[ -n "${PSE}" ]]; then
        PSE="${PSE},"
    fi
    PSE="${PSE}SC"
fi
if [[ -n "${TMUX}" ]]; then
    if [[ -n "${PSE}" ]]; then
        PSE="${PSE},"
    fi
    PSE="${PSE}TX"
fi
if [[ -n "${PSE}" ]]; then
    PSE="[\[\e[0;31m\]${PSE}\[\e[00m\]]"
fi
export PS1="\[\e[01;m\]\u@\[\e[0;32m\]\h\[\e[00m\]${PSE} \[\e[0;33m\]\w\[\e[00m\]\$(__git_ps1) \$ "

export LS_COLORS="di=36"

export LOCAL=$HOME/.local
export CACHE=$HOME/.cache
export CONFIG=$HOME/.config

export PATH=$LOCAL/bin:$PATH

export EDITOR="emacs -nw"
export ALTERNATE_EDITOR=""

export LESS="-R"

### Extra software

# Node.js

export NPM_CONFIG_USERCONFIG=$CONFIG/npm/config

# Ruby gem

export GEM_HOME=$LOCAL/share/gem
export GEM_CACHE=$CACHE/gem.cache
export GEMCACHE=$GEM_CACHE

export PATH=$GEM_HOME/bin:$PATH

# Go
export GOBIN=$LOCAL/bin
export GOPATH=$HOME/Code/go:/usr/share/gocode

# Haskell cabal

export PATH=$HOME/.cabal/bin:$PATH

### Completion

function _load_completions {
    for comp in "${1}"; do
        if [ -f "${comp}" ] ; then
            . $comp
        fi
    done
}

_load_completions `ls -w1 ${CONFIG}/bash/completion.d/*.completion.bash`
_load_completions `ls -w1 ${HOME}/.local/share/bash-completion/completions/*`

### Aliases / Functions

alias dmesg="dmesg --human"
alias open="xdg-open"
alias ls="ls -B --color=auto  --group-directories-first"
alias tmux="tmux -f ~/.config/tmux/config"

function power_status () {
    cat /sys/devices/system/cpu/cpu{0,1,2,3}/cpufreq/scaling_governor
}

function power_powersave () {
    sudo su -c 'for i in /sys/devices/system/cpu/cpu{0,1,2,3}/cpufreq/scaling_governor; do echo "powersave" > $i; done'
}

function power_ondemand () {
    sudo su -c 'for i in /sys/devices/system/cpu/cpu{0,1,2,3}/cpufreq/scaling_governor; do echo "ondemand" > $i; done'
}

function git-commiters () {
    if [ $# -eq 0 ]; then
        git log --oneline --pretty="format:%an <%ae>" | sort | uniq
    else
        git log --oneline --pretty="format:%an <%ae>" $1.. | sort | uniq
    fi
}

function mkcd () {
    if [ ! -e "${1}" ]; then
        mkdir -p "${1}"
    fi
    cd "${1}"
}

function history-wipe () {
    cat /dev/null > ~/.bash_history && history -c && exit
}

## CMake helpers

function _cm-pre () {
    if [ ! -f "./CMakeLists.txt" ]; then
        echo "No CMakeLists.txt file found!";
        exit 1;
    fi

    mkdir -p "./build"
    cd build
}

function _cm-conf () {
    echo "Executing cmake..."
    cmake "${@}" ..
}

function _cm-build () {
    echo "Building..."
    make
}

function _cm-install () {
    echo "Installing..."
    make install
}

function _cm-post () {
    cd ..
}

function cmake-conf () {
    _cm-pre && _cm-conf "${@}"
    _cm-post
}

function cmake-build () {
    _cm-pre && _cm-conf "${@}" && _cm-build
    _cm-post
}

function cmake-install () {
    _cm-pre && _cm-conf "${@}" && _cm-build && _cm-install
    _cm-post
}
